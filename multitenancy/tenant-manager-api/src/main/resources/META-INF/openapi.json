{
    "openapi": "3.0.2",
    "info": {
        "title": "Apicurio Registry - Tenant Management API",
        "version": "1.0.0",
        "description": "The REST API to the Apicurio Registry Tenant Manager.  The Tenant Manager is responsible for creating and deleting tenants from a multi-tenant deployment of Apicurio Registry.",
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0"
        }
    },
    "paths": {
        "/api/v1/tenants": {
            "summary": "Path used to manage the list of tenants.",
            "description": "The REST endpoint/path used to list and create zero or more `Tenant` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RegistryTenant"
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `Tenant` entities."
                    }
                },
                "operationId": "getTenants",
                "summary": "List All Tenants",
                "description": "Gets a list of all `Tenant` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `Tenant` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NewRegistryTenantRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegistryTenant"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "createTenant",
                "summary": "Create a Tenant",
                "description": "Creates a new instance of a `Tenant`."
            }
        },
        "/api/v1/tenants/{tenantId}": {
            "summary": "Path used to manage a single Tenant.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `Tenant`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegistryTenant"
                                }
                            }
                        },
                        "description": "Successful response - returns a single `Tenant`."
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "operationId": "getTenant",
                "summary": "Get a Tenant",
                "description": "Gets the details of a single instance of a `Tenant`."
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Successful response."
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "operationId": "deleteTenant",
                "summary": "Delete a Tenant",
                "description": "Deletes an existing `Tenant`."
            },
            "parameters": [
                {
                    "name": "tenantId",
                    "description": "A unique identifier for a `Tenant`.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/api/v1/registry": {
            "summary": "Path used to access the information of the registry deployment being managed",
            "description": "This path only contains a `GET` operation to obtain the details of the registry deployment that this tenant manager API is managing",
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegistryDeploymentInfo"
                                }
                            }
                        },
                        "description": "Basic information about the Registry deployment being managed"
                    }
                },
                "operationId": "getRegistryInfo",
                "summary": "Returns the details of the registry deployment being managed"
            }
        }
    },
    "components": {
        "schemas": {
            "TenantId": {
                "title": "Root Type for TenantId",
                "description": "The unique ID of a tenant managed by this API.",
                "type": "string",
                "example": "\"12345\""
            },
            "ErrorInfo": {
                "$ref": "#/components/schemas/ErrorInfo1"
            },
            "NewRegistryTenantRequest": {
                "title": "Root Type for NewTenant",
                "description": "The information required when creating a new tenant.",
                "type": "object",
                "properties": {
                    "tenantId": {
                        "$ref": "#/components/schemas/TenantId"
                    }
                },
                "example": {
                    "organizationId": "bank-of-foo",
                    "deploymentFlavor": "SMALL"
                }
            },
            "RegistryDeploymentInfo": {
                "title": "Root Type for RegistryDeployment",
                "description": "Basic information of the Registry deployment that the Tenant Manager API is managing",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "example": {
                    "name": "registry-abc",
                    "url": "https://registry.apps.com"
                }
            },
            "RegistryTenant": {
                "title": "Root Type for Tenant",
                "description": "Models a single tenant.",
                "required": [
                    "tenantId",
                    "createdOn"
                ],
                "type": "object",
                "properties": {
                    "tenantId": {
                        "$ref": "#/components/schemas/TenantId"
                    },
                    "createdOn": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "example": {
                    "tenantId": "12345",
                    "createdOn": "2021-03-17T21:35:00Z",
                    "createdBy": "usernamefoo",
                    "organizationId": "bank-of-foo",
                    "deploymentFlavor": "SMALL",
                    "status": {
                        "status": "PROVISIONING",
                        "ready": false,
                        "healthy": true
                    }
                }
            },
            "ErrorInfo1": {
                "title": "Root Type for ErrorInfo",
                "description": "Details about a specific error returned by the server.",
                "required": [
                    "error_code"
                ],
                "type": "object",
                "properties": {
                    "error_code": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "example": {
                    "error_code": 500,
                    "message": "An error occurred on the server."
                }
            }
        },
        "responses": {
            "NotFound": {
                "$ref": "#/components/responses/NotFound1"
            },
            "ServerError": {
                "$ref": "#/components/responses/ServerError1"
            },
            "NotFound1": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorInfo1"
                        }
                    }
                },
                "description": "The response returned when something is requested but cannot be found."
            },
            "ServerError1": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorInfo1"
                        }
                    }
                },
                "description": "The response sent from the server when an unexpected error occurs (for example \na database connection error)."
            }
        }
    }
}